9.2 Forms的类别

"form"是一个待求值的lisp对象. Emacs对form求值的时候依赖form的类型.
Emacs总共有三种form: 符号, 列表以及其他类型. 这一节我们来讲讲这些
form, 让我们先从其他类型开始.

* 菜单

* 自求值form    求值后仍为它们自身的form
* 符号form      符号form求值后为它们的变量的值
* 列表form的分类 怎样对各种列表form进行区分
* 符号函数的间接引用 当列表的第一个元素为符号时

9.2.3 列表form的分类

一个非空的列表form根据其第一个元素, 分为函数调用, 宏调用, 特殊form.
这三种form求值方式各有不同, 我们将在下面章节阐述. 列表的其他元素
根据列表form的不同作为参数传给函数, 宏, 特殊form.

对一个非空列表form求值, 首先要看它的第一个元素, 这个元素也决定了列表
的其他元素将被怎样处理. 就像其他的Lisp变种如Scheme一样, 列表form的第一个
元素不被求值. 

9.2.4
当列表的第一个元素为符号时, 求值器会先检查这个符号的函数单元, 如果它的
函数单元仍然为符号, 再继续看这个符号的函数单元, 知道找到一个非符号, 
这个叫做"符号函数的间接引用". 想了解更详细的关于符号函数的间接引用的信息的话, 
可以去看"函数名字"这一节.

当一个符号的函数单位为它本身的时候, 上述处理过程会引起一个无限循环. 如果
符号的函数单位为空函数的话, `symbol-function'则会报`void-function'的错误.刚才所
说的两种情况都没有发生的话, 求值器最终会得到一个非符号, 可能是一个函数, 也有
可能是某个合适的对象. 

更准确的来说, 这时候, 求值器会得到一个lisp函数(lambda表达式), 或者字节码函数, 
或者原始函数, 或者lisp宏, 或者特殊表达式, 再或者自动加载对象. 下面我们会提到
这些. 如果求值器得到的不是上面所述的一种的话, emacs会报`invalid-function'的错误.

下面我们将用一个例子来演示"符号函数的间接引用". 我们使用`fset'来设置符号的函数单元, 
用`symbol-function'来取得这个符号的函数单元(参见"函数单元"这一节). 具体的来说, 
我们把符号`car储存在`first的函数单元里面, 把`first'储存在符号`erste'的函数单元里面.

     ;; Build this function cell linkage:
     ;;   -------------       -----        -------        -------
     ;;  | #<subr car> | <-- | car |  <-- | first |  <-- | erste |
     ;;   -------------       -----        -------        -------

     (symbol-function 'car)
          => #<subr car>
     (fset 'first 'car)
          => car
     (fset 'erste 'first)
          => first
     (erste '(1 2 3))   ; Call the function referenced by `erste'.
          => 1

做为对照, 我们再来举一个不用"符号函数的间接引用"的例子, 因为下面这个例子的列表的第一个
元素不是一个符号, 而是一个lisp的匿名函数. 

     ((lambda (arg) (erste arg))
      '(1 2 3))
          => 1

执行上述函数的时候, 它会对它的函数体进行求值; 求值的时候会牵涉到`erste'的符号函数间接引用. 

内置函数`indirect-function'可以直接执行"符号函数的间接引用".
